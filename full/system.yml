- name: Base Linux configuration
  hosts: 127.0.0.1
  connection: local

  vars:
    docker_gpg_key_path: /usr/share/keyrings/docker-archive-keyring.gpg

  tasks:
    # cpu architecture
    - name: Get CPU architecture
      shell: dpkg --print-architecture
      register: dpkg_architecture_command
      changed_when: false

    - name: Store CPU architecture
      set_fact:
        dpkg_architecture: "{{ dpkg_architecture_command.stdout }}"

    # os config
    - name: Set a hostname
      hostname:
        name: devvm

    - name: Set timezone
      timezone:
        name: Australia/Sydney

    - name: Allow 'sudo' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: "^%sudo"
        line: "%sudo ALL=(ALL) NOPASSWD: ALL"
        validate: visudo -cf %s

    - name: Disable wayland
      lineinfile:
        path: /etc/gdm3/custom.conf
        regexp: "^#?WaylandEnable="
        line: "WaylandEnable=false"

    - name: Set QT to X11
      lineinfile:
        path: /etc/environment
        line: QT_QPA_PLATFORM=xcb

    # chromium
    - name: Install chromium
      snap:
        name: chromium

    # docker
    - name: Download docker apt key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: "{{ docker_gpg_key_path }}.key"

    - name: Unarmour docker apt key
      ansible.builtin.shell: |
        cat {{ docker_gpg_key_path }}.key | gpg --dearmor > {{ docker_gpg_key_path }}
      args:
        creates: "{{ docker_gpg_key_path }}"

    - name: Add docker apt repository
      apt_repository:
        repo: "deb [arch={{ dpkg_architecture }} signed-by={{ docker_gpg_key_path }}] https://download.docker.com/linux/ubuntu {{ ansible_facts['distribution_release'] }} stable"
        filename: docker
        state: present

    - name: Install docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: latest

    # git-credential-manager
    - name: Check latest gcm version
      shell: curl -s https://api.github.com/repos/git-ecosystem/git-credential-manager/releases/latest | jq -r .tag_name | sed 's/^v//'
      register: gcm_latest_version
      changed_when: false

    - name: Check current gcm version
      shell: git-credential-manager --version | sed 's/\+.*//' || true
      register: gcm_current_version
      changed_when: false

    - name: Install gcm
      when: gcm_latest_version.stdout != gcm_current_version.stdout
      shell: |
        DOWNLOAD_URL=$( \
          curl -s curl -s https://api.github.com/repos/git-ecosystem/git-credential-manager/releases/latest \
          | jq -r '.assets[].browser_download_url' \
          | grep "gcm-linux_amd64\\..*\\.deb" \
        )
        FILE_NAME=$(basename ${DOWNLOAD_URL})

        curl -O -L ${DOWNLOAD_URL}
        apt install ./${FILE_NAME}
        rm -rf ${FILE_NAME}

    # jetbrains
    - name: Install Jetbrains Rider
      snap:
        name: rider
        classic: yes

    - name: Install Pycharm Professional
      snap:
        name: pycharm-professional
        classic: yes

    - name: Install IntelliJ Idea Ultimate
      snap:
        name: intellij-idea-ultimate
        classic: yes

    - name: Install DataGrip
      snap:
        name: datagrip
        classic: yes

    # postman
    - name: Install Postman
      snap:
        name: postman

    # vscode
    - name: Install vscode
      snap:
        name: code
        classic: yes

